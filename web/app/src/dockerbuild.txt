tidb-data-assistant-api

###docker push us-central1-docker.pkg.dev/isentropic-tape-419722/tidb-data-assistant-api/tidb-data-assistant-api:latest 

docker images

## docker build -t tidb-data-assistant-api:latest . this is old version, use this on non mac devices, the -t auto tags

docker buildx build --platform linux/amd64 -t tidb-data-assistant-api:latest .

docker tag tidb-data-assistant-api:latest us-central1-docker.pkg.dev/isentropic-tape-419722/tidb-data-assistant-api/tidb-data-assistant-api:latest

docker push us-central1-docker.pkg.dev/isentropic-tape-419722/tidb-data-assistant-api/tidb-data-assistant-api:latest

#confirm they are uploaded correctly
gcloud artifacts docker images list us-central1-docker.pkg.dev/isentropic-tape-419722/tidb-data-assistant-api

docker stop <container_id>
docker ps ### gets container id

docker run -p 8080:8080 tidb-data-assistant-api

docker run -p 8080:8080 aws_docker_file 

#docker images - to list all images

# important docker commands to remove all images
docker stop $(docker ps -a -q)
docker rm -f $(docker ps -a -q)
docker rmi -f $(docker images -q)
docker system prune -a --volumes # complete cleanup

****************************************************

#AWS Steps

# Authenticate Docker to ECR in us-east-1
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 445567114311.dkr.ecr.us-east-1.amazonaws.com

# This is for mac building running locally
docker build -t my_acrobot:latest . 

# for pushing to aws
docker buildx build --platform linux/amd64 -t my_acrobot:latest .

# this is to run the docker container locally
docker run -p 443:443 --name my-acrbot-https-app my_acrobot:latest

# Tag the image
docker tag aws_docker_file:latest 445567114311.dkr.ecr.us-east-1.amazonaws.com/aws_docker_file:latest

# Push the image
docker push 445567114311.dkr.ecr.us-east-1.amazonaws.com/aws_docker_file:latest

# runs locally example
docker run -p 8080:8080 first-time  

docker tag first-time:latest 445567114311.dkr.ecr.us-east-1.amazonaws.com/test_http:latest
docker push 445567114311.dkr.ecr.us-east-1.amazonaws.com/test_http:latest

# another round
docker buildx build --platform linux/amd64 -t test_http .

#find the process using port 443
sudo lsof -i :443
copy into chat gpt and it will output kil command

# to ssh to my server
ssh -i "youtubedemo-key-pair.pem" ubuntu@ec2-54-197-23-79.compute-1.amazonaws.com

# to copy the certs to the server
scp -i "youtubedemo-key-pair.pem" -r /Users/squeebit/Documents/Projects/aws_docker_file/ssl-certs ubuntu@ec2-54-197-23-79.compute-1.amazonaws.com:/home/ubuntu/app/MyAcrobot/web/app/src  







### This worked after i added the web socket stuff
docker buildx build --platform linux/amd64 -t final_myacrobot:latest --load .
docker images # to confirm container was created
docker tag final_myacrobot:latest 445567114311.dkr.ecr.us-east-1.amazonaws.com/final_myacrobot:latest
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 445567114311.dkr.ecr.us-east-1.amazonaws.com
docker push 445567114311.dkr.ecr.us-east-1.amazonaws.com/final_myacrobot:latest





# for the new instance 
scp -i "youtubedemo-key-pair.pem" -r /Users/squeebit/Documents/Projects/aws_docker_file/ssl-certs ubuntu@ec2-107-20-21-85.compute-1.amazonaws.com:/home/ubuntu/MyAcrobot/web/app/src
docker build -t flask-websocket-app .
docker run -d -p 443:443 -p 80:80 --name flask-websocket-app flask-websocket-app


# i have to do this when running on server not locally
docker exec -it 64de60d6547c bash
cd /app/db
sqlite3 myacrobot.db
CREATE TABLE Message (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    content TEXT NOT NULL
);

CREATE TABLE Score (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    score INTEGER NOT NULL
);
.tables


##ssh to my shit, ha! always use ssh keys! 
ssh -i "my_new_secret_key.pem" ubuntu@ec2-54-92-200-21.compute-1.amazonaws.com

